#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №10. Доставка сообщений до Команды.

**Цель:** Предоставить возможность обмена данными для длительных операций.

**Результаты:** После выполнения работы Вы сможете:
1. Отправлять сообщения длительной операции.

## Задание.
Поскольку длительная операция выполняется в течение некоторого момента времени, то может возникнуть необходимость
в предоставлении дополнительной информации, влияющей на ход выполнения. Поскольку Команды и источник данных часто находятся в разных потоках,
то сделать это надо потоко-безопасным образом. Самый простой способ - используя идиому Производитель-Поребитель, в нашем случае - очередь.

Набор данных, предназначенных для Команды будем называть сообщением. Можно использовать любую подходящую конструкцию языка программирования для 
представления сообщения. Необходимо учесть, что скорость доставки сообщений может быть выше, чем скорость обработки, а значит очередь сообщений должна быть
у каждой Длительной операции. При этом потоко-безопасные очереди требуют системных ресурсов, а значит, чтобы не получить ограничение на максимальное количество
одновремнно работающих длительных Команд, нельзя использовать потоко-безопасные очереди. 

Возможный вариант реализации - оставить одну потоко-безопасную очередь для потока, а для Команд использовать обычные очереди. Осталось только решить, как сообщение
излеченное из очереди потока попадет в очередь Команды. Один из возможных вариантов:
1. Каждая команда имеет уникальный идентификатор.
2. Сообщение содержит уникальный идентификатор Команлды, которому оно адресовано.
3. Для потока создаем специальную Длительную Команду, которая назвается Роутером. Он хранит коллекцию пар (id Команды, ссылка на очередь Команды). При вызове метода Execute этой 
Роутера, если очередь потока не пуста, происходит чтение очередного сообщения и по id Команды определяется очередь, куда это сообщение записывается.
Если id Команды не определен, на консоль выводится сообщение о невозможности доставить сообщение неизвестному адресату.
При старте новой Команды, ее очередь необходимо добавить в коллекцию Роутера. При остановке Команды - очередь удаляется из коллекции Роутера.

Продемонстрировать работу Роутера на двух Длительных Командах и на отправке сообщения несуществующей Команде.

**Материалы для самостоятельного изучения**.
1. [Паттерн Сообщение](https://www.enterpriseintegrationpatterns.com/patterns/messaging/Message.html)
2. [Паттерн Роутер - весь раздел про Роутеры](https://www.enterpriseintegrationpatterns.com/patterns/messaging/MessageRoutingIntro.html)
3. [Обмен сообщеними](https://www.enterpriseintegrationpatterns.com/patterns/messaging/MessageConstructionIntro.html)

#!csharp

using System; 
using System.Collections.Concurrent;
using System.Linq;
using System.Collections.Generic; 
using System.Threading; 

public interface ICommand
{
    void Execute();
}

public interface IScheduler 
{ 
    bool HasCommand(); 
    ICommand Select(); 
    void Add(ICommand cmd); 
}

public interface IMessageHandler
{
    void HandleMessage(Message message);
}

public class Scheduler : IScheduler 
{ 
    ConcurrentQueue<ICommand> concurrentQueue = new ConcurrentQueue<ICommand>();
    List<ICommand> commands = new List<ICommand>();
    int currentIndex = 0;

    public bool HasCommand()
    {
        lock (commands) return commands.Count > 0 || !concurrentQueue.IsEmpty;
    }

    public ICommand Select()
    {
        lock (commands)
        {
            if (commands.Count == 0)
            {
                while (concurrentQueue.TryDequeue(out var queuedCmd))
                    commands.Add(queuedCmd);
            }
            if (commands.Count == 0) return null;

            var selectedCmd = commands[currentIndex];
            currentIndex = (currentIndex + 1) % commands.Count;

            return selectedCmd;
        }
    }
    public void Add(ICommand cmd) => concurrentQueue.Enqueue(cmd);
}

public class Message
{
    public int CommandId { get; }
    public string Info { get; }

    public Message(int commandId, string info)
    {
        CommandId = commandId;
        Info = info;
    }
}

public class LongCommand(int id) : ICommand, IMessageHandler
{
    private Queue<Message> QueueMessage = new Queue<Message>();

    public void Execute()
    {
        while (QueueMessage.Count > 0)
        {
            var message = QueueMessage.Dequeue();
        }
    }

    public void HandleMessage(Message message)
    {
        Console.WriteLine($"Command {id} processes the received message: \"{message.Info}\"");
        QueueMessage.Enqueue(message);
    }
}

public class Router : ICommand
{
    private ConcurrentQueue<Message> concurrentQueue = new ConcurrentQueue<Message>();
    private Dictionary<int, IMessageHandler> handlers = new Dictionary<int, IMessageHandler>();

    public void AddHandler(int commandaId, IMessageHandler handler) => handlers[commandaId] = handler;
    public void RemoveHandler(int commandaId) => handlers.Remove(commandaId);
    public void EnqueueMessage(Message message) => concurrentQueue.Enqueue(message);

    public void Execute()
    {
        while (concurrentQueue.TryDequeue(out var message))
        {
            if (handlers.TryGetValue(message.CommandId, out var handler)) handler.HandleMessage(message);
            else Console.WriteLine($"The message was not delivered to an unknown command with ID {message.CommandId}");
        }
    }
}

public class ServerThread 
{ 
    private Thread thread;
    private IScheduler scheduler; 
    private ConcurrentQueue<ICommand> concurrentQueue = new ConcurrentQueue<ICommand>();
    private ManualResetEvent manualResetEvent = new ManualResetEvent(false);
    private bool isRunning = true;

    public ServerThread(IScheduler scheduler)
    {
        this.scheduler = scheduler;
        thread = new Thread(Run);
        thread.Start();
    }

    public void EnqueueCommand(ICommand command)
    {
        if (command == null) throw new ArgumentNullException(nameof(command));
        concurrentQueue.Enqueue(command);
        manualResetEvent.Set();
    }

    private void Run()
    {
        while (isRunning || !concurrentQueue.IsEmpty)
        {
            if (concurrentQueue.TryDequeue(out var command))
            {
                command.Execute();
            }
            else
            {
                manualResetEvent.WaitOne();
                manualResetEvent.Reset();
            }
        }
    }

    public void Stop()
    {
        isRunning = false;
        manualResetEvent.Set();
        thread.Join();
    }
}

#!csharp

var scheduler = new Scheduler();
var serverThread = new ServerThread(scheduler);
var router = new Router();

List<LongCommand> commands = new List<LongCommand> {new LongCommand(1), new LongCommand(2)};

commands.Select((command, id) => new { Id = id + 1, Command = command }).ToList()
        .ForEach(i => router.AddHandler(i.Id, i.Command));

serverThread.EnqueueCommand(router);

Enumerable.Range(1, 3).ToList().ForEach(i => router.EnqueueMessage(new Message(i, $"Message to command with ID {i}")));

serverThread.Stop();
