#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №9. Реализация длительных операций.

**Цель:** Предоставить возможность выполннеия команд, для полного завершения которых требуется более одного вызова Execute.

**Результаты:** После выполнения работы Вы сможете:
1. Выполнять длительные опреации в отдельном потоке без монопольного использования потока в течение длительного времени.
3. Прерывать выполнение таких команд. 


## Задание.
Если для полного выполнения командв потребуется более одного вызова Execute, необходимо такую команду добавить в планировщик.

Для иллюстрации выполнненой работы определить команду

#!csharp

using System;
using System.Collections.Concurrent;
using System.Threading;
using System.Linq;

interface ICommand
{
    void Execute();
}

interface ILongableCommand : ICommand
{
    bool Check();
}

public class TestCommand(int id) : ILongableCommand
{
    int counter = 0;

    public void Execute()
    {
        Console.WriteLine($"Поток {id} вызов {++counter}");
    }

    public bool Check()
    {
        return counter < 3;
    }

}

class Scheduler
{
    private ConcurrentQueue<ILongableCommand> commands = new ConcurrentQueue<ILongableCommand>();
    private CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();
    private ManualResetEvent manualResetEvent = new ManualResetEvent(false);

    public void ScheduleCommand(ILongableCommand command) => commands.Enqueue(command);

    public void HardStop() => cancellationTokenSource.Cancel();

    public void Run()
    {
        while (!cancellationTokenSource.IsCancellationRequested)
        {
            if (commands.TryDequeue(out ILongableCommand command))
            {
                command.Execute();
                if (command.Check()) commands.Enqueue(command);
            }
            else Thread.Sleep(10);
        }
    }
}

Scheduler scheduler = new Scheduler();

Enumerable.Range(1, 5).ToList().ForEach(i => scheduler.ScheduleCommand(new TestCommand(i)));

Task.Run(() => scheduler.Run());

Thread.Sleep(500);
scheduler.HardStop();
Console.WriteLine("\nПоток остановлен");

#!markdown

Необходимо проиллюстрировать выполнение 5 экземпляров TestCommand 3 раза, затем остановить поток с помощью HardStop.
