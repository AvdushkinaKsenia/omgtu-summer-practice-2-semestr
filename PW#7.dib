#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №7.Реализация потока обработки команад.

**Цель:** Реализовать основу для многопоточного сервера приложений.

**Результаты:** После выполнения работы Вы сможете:
1. Обрабатывать множество операций в несколько потоков.
2. Останавливать потоки по запросу извне.

## Задание.
Пусть операция задана интерфейсом

#!csharp

public interface ICommand
{
    void Execute();
}

#!markdown

Классы, наследующие интерйес ICommand будем называть **Командами.**

Реализовать класс ServerThread и команды по hard и soft завершению потока. 

ServerThread может менять свое поведение для обработки следующей Команды.
Исключение, выброшенное из Команды, перехватывается и передается вместе с самой Командой в ExceptionHandler (см. ЛР №5) Примечание. Наличие реализованного обработчика исключений не обязательно для выполнения данной задачи. 

Команда HardStop приводит к немедленной остановке потока, несмотря на, что в очереди потока есть еще Команды.
Команда  SoftStop останавливает поток, когда в очереди потока закончатся все Команды.

Команды HardStop и SoftStop успешно выполняются только в потоке, который они должны остановить, в противном случае выбрасывают исключение.
Отсутствие Команд в очереди потока не должно требовать значительных затрат процессорного времени. Значительными считаются затраты, которые зависят от времени простоя потока.

Написать проверку, которая гарантирует правильное выполнение команд HardStop и SoftStop.

#!csharp

using System;
using System.Collections.Concurrent;
using System.Threading;

public class ServerThread
{
    private Thread thread;
    private ConcurrentQueue<ICommand> concurrentQueue = new ConcurrentQueue<ICommand>();
    private ManualResetEvent manualResetEvent = new ManualResetEvent(false);
    private bool isRunning = true;
    private bool hardStopUsed = false;

    public ServerThread()
    {
        thread = new Thread(Run);
        thread.Start();
    }

    public void EnqueueCommand(ICommand command)
    {
        if (command == null) throw new ArgumentNullException(nameof(command));
        concurrentQueue.Enqueue(command);
        manualResetEvent.Set();
    }

    public void UseSoftStop()
    {
        Console.WriteLine("Soft stop used");
        manualResetEvent.Set();
    }

    public void UseHardStop()
    {
        hardStopUsed = true;
        Console.WriteLine("Hard stop used. Immediately stopping the thread.");
        isRunning = false;
        manualResetEvent.Set();
    }

    private void Run()
    {
        while (isRunning || !concurrentQueue.IsEmpty)
        {
            if (concurrentQueue.TryDequeue(out var command))
            {
                try
                {
                    command.Execute();
                }
                catch (Exception ex)
                {
                    ExceptionHandler(command, ex);
                }
            }
            else
            {
                manualResetEvent.WaitOne();
                manualResetEvent.Reset();
            }

            if (hardStopUsed)
                break;
        }
    }

    public void Stop()
    {
        isRunning = false;
        manualResetEvent.Set();
        thread.Join();
    }

    public void ExceptionHandler(ICommand command, Exception ex) => Console.WriteLine($"Exception: {ex.Message}");
}

#!csharp

public class HardStop : ICommand
{
    private ServerThread serverThread;

    public HardStop(ServerThread serverThread)
    {
        if (serverThread == null) throw new ArgumentNullException(nameof(serverThread));
        this.serverThread = serverThread;
    }

    public void Execute() => serverThread.UseHardStop();
}

public class SoftStop : ICommand
{
    private ServerThread serverThread;

    public SoftStop(ServerThread serverThread)
    {
        if (serverThread == null) throw new ArgumentNullException(nameof(serverThread));
        this.serverThread = serverThread;
    }

    public void Execute() => serverThread.UseSoftStop();
}

public class TestCommand : ICommand
{
    private string message;
    private bool throwException;

    public TestCommand(string message, bool throwException = false)
    {
        if (message == null) throw new ArgumentNullException(nameof(message));
        this.message = message;
        this.throwException = throwException;
    }

    public void Execute()
    {
        Console.WriteLine($"Executing: {message}");
        if (throwException) throw new InvalidOperationException("Test exception");
    }
}

#!csharp

var serverThread1 = new ServerThread();

serverThread1.EnqueueCommand(new TestCommand("command 1"));
serverThread1.EnqueueCommand(new TestCommand("command 2"));

serverThread1.EnqueueCommand(new SoftStop(serverThread1));

serverThread1.EnqueueCommand(new TestCommand("command 3"));

serverThread1.Stop();

#!csharp

var serverThread2 = new ServerThread();

serverThread2.EnqueueCommand(new TestCommand("command 1"));
serverThread2.EnqueueCommand(new TestCommand("command 2"));

serverThread2.EnqueueCommand(new HardStop(serverThread2));

serverThread2.EnqueueCommand(new TestCommand("command 3"));

serverThread2.Stop();

#!csharp

var serverThread3 = new ServerThread();

serverThread3.EnqueueCommand(new TestCommand("command 1"));
serverThread3.EnqueueCommand(new TestCommand("command 2"));
serverThread3.EnqueueCommand(new TestCommand("command 3", true)); //exception

serverThread3.EnqueueCommand(new SoftStop(serverThread3));

serverThread3.Stop();
